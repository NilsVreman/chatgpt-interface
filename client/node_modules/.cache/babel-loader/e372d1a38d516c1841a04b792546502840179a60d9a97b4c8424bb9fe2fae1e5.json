{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sesa719660\\\\repos\\\\chatgpt-interface\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { format } from \"date-fns\"; // Import date-fns for date formatting\nimport { InputBox } from \"./InputBox\";\nimport ReactMarkdown from \"react-markdown\";\nimport \"./App.css\";\nimport { queryChatGpt, saveChatHistory, loadChatHistory } from \"./ServerCommunicationService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const chatWindowRef = useRef(null); // Create a ref for the chat window\n\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n    }\n  }, [messages]); // Dependency array includes messages\n\n  useEffect(() => {\n    const fetchChatHistory = async () => {\n      try {\n        const chatHistory = await loadChatHistory(\"chat-history\");\n        if (chatHistory) {\n          setMessages(chatHistory);\n        } else {\n          setMessages([createChatMessage(\"Welcome to ChatGPT! Type a message to start chatting.\", \"response\")]);\n        }\n      } catch (error) {\n        console.error(\"Error loading chat history:\", error);\n      }\n    };\n    fetchChatHistory();\n  }, []);\n  const sendMessage = async inputMessage => {\n    if (inputMessage) {\n      postChatMessage(createInputMessage(inputMessage));\n      const responseMessage = await queryChatGpt(inputMessage);\n      postChatMessage(createResponseMessage(responseMessage), async updatedMessages => {\n        await saveChatHistory(updatedMessages, \"chat-history\");\n      });\n    }\n  };\n  const postChatMessage = (message, callback) => {\n    if (message) {\n      setMessages(messageHistory => {\n        const updatedMessages = [...messageHistory, message];\n        if (callback) {\n          callback(updatedMessages); // Call saveChatHistory after state update\n        }\n        return updatedMessages;\n      });\n    }\n  };\n  const createChatMessage = (message, type) => {\n    return {\n      text: message,\n      type: type,\n      time: format(new Date(), \"MMM dd - HH:mm\")\n    };\n  };\n  const createInputMessage = message => {\n    return createChatMessage(message, \"input\");\n  };\n  const createResponseMessage = message => {\n    return createChatMessage(message, \"response\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      ref: chatWindowRef,\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.type === \"input\" ? \"input-message\" : \"response-message\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: msg.type === \"input\" ? \"You\" : \"ChatGPT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spacer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"[\", msg.time, \"]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n      onSendMessage: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4lHY785o7yQFqveBQEjjpN7hYb0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","format","InputBox","ReactMarkdown","queryChatGpt","saveChatHistory","loadChatHistory","jsxDEV","_jsxDEV","App","_s","messages","setMessages","chatWindowRef","current","scrollTop","scrollHeight","fetchChatHistory","chatHistory","createChatMessage","error","console","sendMessage","inputMessage","postChatMessage","createInputMessage","responseMessage","createResponseMessage","updatedMessages","message","callback","messageHistory","type","text","time","Date","className","children","ref","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/sesa719660/repos/chatgpt-interface/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { format } from \"date-fns\"; // Import date-fns for date formatting\r\nimport { InputBox } from \"./InputBox\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport \"./App.css\";\r\nimport {\r\n  queryChatGpt,\r\n  saveChatHistory,\r\n  loadChatHistory,\r\n} from \"./ServerCommunicationService\";\r\n\r\nfunction App() {\r\n  const [messages, setMessages] = useState([]);\r\n  const chatWindowRef = useRef(null); // Create a ref for the chat window\r\n\r\n  useEffect(() => {\r\n    if (chatWindowRef.current) {\r\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\r\n    }\r\n  }, [messages]); // Dependency array includes messages\r\n\r\n  useEffect(() => {\r\n    const fetchChatHistory = async () => {\r\n      try {\r\n        const chatHistory = await loadChatHistory(\"chat-history\");\r\n        if (chatHistory) {\r\n          setMessages(chatHistory);\r\n        } else {\r\n          setMessages([\r\n            createChatMessage(\r\n              \"Welcome to ChatGPT! Type a message to start chatting.\",\r\n              \"response\"\r\n            ),\r\n          ]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading chat history:\", error);\r\n      }\r\n    };\r\n\r\n    fetchChatHistory();\r\n  }, []);\r\n\r\n  const sendMessage = async (inputMessage) => {\r\n    if (inputMessage) {\r\n      postChatMessage(createInputMessage(inputMessage));\r\n      const responseMessage = await queryChatGpt(inputMessage);\r\n      postChatMessage(\r\n        createResponseMessage(responseMessage),\r\n        async (updatedMessages) => {\r\n          await saveChatHistory(updatedMessages, \"chat-history\");\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const postChatMessage = (message, callback) => {\r\n    if (message) {\r\n      setMessages((messageHistory) => {\r\n        const updatedMessages = [...messageHistory, message];\r\n        if (callback) {\r\n          callback(updatedMessages); // Call saveChatHistory after state update\r\n        }\r\n        return updatedMessages;\r\n      });\r\n    }\r\n  };\r\n\r\n  const createChatMessage = (message, type) => {\r\n    return {\r\n      text: message,\r\n      type: type,\r\n      time: format(new Date(), \"MMM dd - HH:mm\"),\r\n    };\r\n  };\r\n  const createInputMessage = (message) => {\r\n    return createChatMessage(message, \"input\");\r\n  };\r\n  const createResponseMessage = (message) => {\r\n    return createChatMessage(message, \"response\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"chat-window\" ref={chatWindowRef}>\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${\r\n              msg.type === \"input\" ? \"input-message\" : \"response-message\"\r\n            }`}\r\n          >\r\n            <div className=\"message-header\">\r\n              <strong>{msg.type === \"input\" ? \"You\" : \"ChatGPT\"}</strong>\r\n              <span className=\"spacer\"></span>\r\n              <span>[{msg.time}]</span>\r\n              <br />\r\n            </div>\r\n            <ReactMarkdown>{msg.text}</ReactMarkdown> {/* Markdown rendering */}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <InputBox onSendMessage={sendMessage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}