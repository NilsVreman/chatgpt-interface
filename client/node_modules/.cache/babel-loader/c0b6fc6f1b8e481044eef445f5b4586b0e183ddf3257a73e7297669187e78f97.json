{"ast":null,"code":"const serverURL = \"http://localhost:5000\";\nexport const queryChatGpt = async message => {\n  try {\n    const response = await fetch(`${serverURL}/api/gpt`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const responseMessage = await response.json();\n    return responseMessage.message;\n  } catch (error) {\n    console.error(\"Error sending message:\", error);\n    return `Server communication error: ${error}`;\n  }\n};\nexport const saveChatHistory = async (chatHistory, chatHistoryName) => {\n  const dataToSend = {\n    chatHistory: chatHistory,\n    chatHistoryName: chatHistoryName\n  };\n  try {\n    const response = await fetch(`${serverURL}/api/save-chat`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(dataToSend)\n    });\n    if (response.ok) {\n      return await response.json();\n    }\n    console.error(`HTTP error! Status: ${response.status}`);\n  } catch (error) {\n    console.error(\"Error saving chat history:\", error);\n    return null;\n  }\n};\nexport const loadChatHistory = async chatHistoryName => {\n  try {\n    const response = await fetch(`${serverURL}/api/load-chat?file_name=${encodeURIComponent(chatHistoryName)}`);\n    if (!response.ok) {\n      console.error(`HTTP error! Status: ${response.status}`);\n      return null;\n    }\n    const responseMessage = await response.json();\n    return responseMessage.chatHistory;\n  } catch (error) {\n    console.error(\"Error loading chat history:\", error);\n    return null;\n  }\n};\n\n// Add more functions as needed","map":{"version":3,"names":["serverURL","queryChatGpt","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","responseMessage","json","error","console","saveChatHistory","chatHistory","chatHistoryName","dataToSend","loadChatHistory","encodeURIComponent"],"sources":["C:/Users/sesa719660/repos/chatgpt-interface/client/src/ServerCommunicationService.js"],"sourcesContent":["const serverURL = \"http://localhost:5000\";\r\n\r\nexport const queryChatGpt = async (message) => {\r\n  try {\r\n    const response = await fetch(`${serverURL}/api/gpt`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ message }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const responseMessage = await response.json();\r\n    return responseMessage.message;\r\n  } catch (error) {\r\n    console.error(\"Error sending message:\", error);\r\n    return `Server communication error: ${error}`;\r\n  }\r\n};\r\n\r\nexport const saveChatHistory = async (chatHistory, chatHistoryName) => {\r\n  const dataToSend = {\r\n    chatHistory: chatHistory,\r\n    chatHistoryName: chatHistoryName,\r\n  };\r\n  try {\r\n    const response = await fetch(`${serverURL}/api/save-chat`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(dataToSend),\r\n    });\r\n    if (response.ok) {\r\n      return await response.json();\r\n    }\r\n    console.error(`HTTP error! Status: ${response.status}`);\r\n  } catch (error) {\r\n    console.error(\"Error saving chat history:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const loadChatHistory = async (chatHistoryName) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${serverURL}/api/load-chat?file_name=${encodeURIComponent(\r\n        chatHistoryName\r\n      )}`\r\n    );\r\n    if (!response.ok) {\r\n      console.error(`HTTP error! Status: ${response.status}`);\r\n      return null;\r\n    }\r\n    const responseMessage = await response.json();\r\n    return responseMessage.chatHistory;\r\n  } catch (error) {\r\n    console.error(\"Error loading chat history:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Add more functions as needed\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,uBAAuB;AAEzC,OAAO,MAAMC,YAAY,GAAG,MAAOC,OAAO,IAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,SAAU,UAAS,EAAE;MACnDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAQ,CAAC;IAClC,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;IAC3D;IACA,MAAMC,eAAe,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAC7C,OAAOD,eAAe,CAACX,OAAO;EAChC,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAQ,+BAA8BA,KAAM,EAAC;EAC/C;AACF,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAOC,WAAW,EAAEC,eAAe,KAAK;EACrE,MAAMC,UAAU,GAAG;IACjBF,WAAW,EAAEA,WAAW;IACxBC,eAAe,EAAEA;EACnB,CAAC;EACD,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,SAAU,gBAAe,EAAE;MACzDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACW,UAAU;IACjC,CAAC,CAAC;IACF,IAAIjB,QAAQ,CAACO,EAAE,EAAE;MACf,OAAO,MAAMP,QAAQ,CAACW,IAAI,CAAC,CAAC;IAC9B;IACAE,OAAO,CAACD,KAAK,CAAE,uBAAsBZ,QAAQ,CAACS,MAAO,EAAC,CAAC;EACzD,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMM,eAAe,GAAG,MAAOF,eAAe,IAAK;EACxD,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEJ,SAAU,4BAA2BsB,kBAAkB,CACxDH,eACF,CAAE,EACJ,CAAC;IACD,IAAI,CAAChB,QAAQ,CAACO,EAAE,EAAE;MAChBM,OAAO,CAACD,KAAK,CAAE,uBAAsBZ,QAAQ,CAACS,MAAO,EAAC,CAAC;MACvD,OAAO,IAAI;IACb;IACA,MAAMC,eAAe,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAC7C,OAAOD,eAAe,CAACK,WAAW;EACpC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,IAAI;EACb;AACF,CAAC;;AAED"},"metadata":{},"sourceType":"module","externalDependencies":[]}